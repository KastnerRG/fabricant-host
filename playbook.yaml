- name: Fabricant-Host
  hosts: localhost
  vars_files:
    - fabricant_users.yaml
    - fabricant_vms.yaml
  environment:
    PROXMOX_PASSWORD: '{{ansible_env.PROXMOX_PASSWORD}}'

  tasks:
# Set up bw
  - name: Install nvm
    ansible.builtin.shell: >
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
    args:
      creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  - name: Install npm
    ansible.builtin.shell: "source {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install v24.3.0"
    args:
      executable: /bin/bash
      creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v24.3.0/bin/npm"
  - name: Install BitWarden CLI
    ansible.builtin.command:
      cmd: >
        bash -c "source $HOME/.nvm/nvm.sh && nvm exec v24.3.0 && npm install -g @bitwarden/cli"
      creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v24.3.0/bin/bw"
  - name: Bootstrap BW Creds
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js unlock --raw > .bw_session'
      chdir: '{{ansible_env.HOME}}/fabricant-host'
      creates: '{{ansible_env.HOME}}/fabricant-host/.bw_session'
  - name: Sync BW Client
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js sync --session `cat .bw_session`'
      chdir: '{{ansible_env.HOME}}/fabricant-host'

# Set timezone
  - name: Set timezone to America/Los_Angeles
    become: true
    community.general.timezone:
      name: America/Los_Angeles

# TODO static ip address

# Packages
  - name: Ensure that system is up to date
    become: true
    apt:
      name: "*"
      state: latest
      autoremove: yes
      update_cache: yes
  - name: Install/update system packages
    become: true
    ansible.builtin.apt:
      pkg:
       - sudo
       - git
       - python3.11-venv
       - vim
       - policykit-1
  - name: Ensure these packages are not installed
    become: true
    ansible.builtin.apt:
      state: absent
      pkg:
        - cups-browsed
        - cups-filters
        - cups-filters-core-drivers
        - libcupsfilters2t64
  - import_tasks: unattended-upgrades.yml

# Qualys/Trellix
  - import_tasks: oec_qualys_trellix.yaml
    vars:
      installer: '{{ansible_env.HOME}}/installers/qualys_trellix/oec-qualystrellixinstallers-linux.tgz'

  - import_tasks: proxmox.yaml
  
# Create users:
  - import_tasks: create_users.yaml

# Monitoring
  - import_tasks: monitoring.yaml

# Auto deploy
  - name: Ensure systemd user dir exists
    ansible.builtin.file:
      path: .config/systemd/user/
      state: directory
  - name: Deploy self updater
    ansible.builtin.template:
      src: ansible_deploy_service.service
      dest: .config/systemd/user/ansible_deploy_service.service
  - name: Enable ansible_deploy_service
    ansible.builtin.systemd_service:
      enabled: true
      name: ansible_deploy_service
      state: started
      scope: user
  - name: enable login linger
    ansible.builtin.command:
      cmd: loginctl enable-linger {{ ansible_user_id }}

# Cleanup SSH
  - name: Require SSH Key
    become: true
    ansible.builtin.lineinfile:
      line: PasswordAuthentication no
      path: /etc/ssh/sshd_config
      regexp: "^(#)?PasswordAuthentication no"
      state: present
    notify:
      - restart sshd

# Must always be at the bottom.
  handlers:
  - name: restart pve firewall
    become: true
    ansible.builtin.shell:
      cmd: pve-firewall restart

  - name: restart sshd
    become: true
    service:
      name: sshd
      state: reloaded